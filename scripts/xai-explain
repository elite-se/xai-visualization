#!/bin/env python

import argparse

from xai_visualization.util.load_data import load_features
import tensorflow as tf
from xai_visualization.explainer.shap_explain import explain as shap_explain
from xai_visualization.explainer.lime_explain import explain as lime_explain
import json
from json import encoder

if __name__ == "__main__":
    parser = argparse.ArgumentParser("explain the decisions of the model")
    parser.add_argument("--model", type=str, help="the path to the model", required=True)
    parser.add_argument("--sessionpath", type=str, help="the path to the session which contains annotations", required=True)
    parser.add_argument("--guy", type=str, choices=['expert', 'novice'], help="Either expert or novice", required=True)
    parser.add_argument("--explainer", type=str, choices=['lime', 'shap'], help="Which explainer to use", required=True)
    args = parser.parse_args()

    guy_features = load_features(args.sessionpath, args.guy)
    model = tf.keras.models.load_model(args.model)

    if args.explainer == 'lime':
        json_data = lime_explain(model, guy_features)
    elif args.explainer == 'shap':
        json_data = shap_explain(model, guy_features)

    encoder.FLOAT_REPR = lambda o: format(o, '.4f')
    with open('data.json', 'w') as f:
        json.dump(json_data, f)
